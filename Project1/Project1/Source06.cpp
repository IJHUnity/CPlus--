//#include <iostream>
//#include <string>
//using namespace std;
////반복문 for문과 배열 1
////배열이란?
////같은 자료형의 변수를 일렬로 나열해놓은 형태입니다.
////프로그램 내에서 배열을 통해 특정 값을 순차적으로 저장할 수 있습니다.
////위치 순서(인덱스)의 개념을 이용해 원하는 위치에 있는 값을 접근할 수 있습니다.
//
////배열 만드는 방법
////자료형 배열명[배열에 담을 값의 개수(배열의 길이)];
////ex) int scores[30]; //scores 배열에 int 형태의 값을 30개까지 보관할 수 있습니다.
//int main()
//{
//	//1. 리터럴 상수를 통한 배열 선언은 가능합니다.
//	//리터럴 상수는 1, 5와 같은 직접적인 값을 의미합니다.
//	string pocket[5];
//	//2. 일반적인 변수를 통한 사용은 할 수 없습니다.
//	//int length;
//	//cin >> length;
//	//string name[length]; //visual studio에서 이 방식 사용이 불가능합니다.
//	//3. 매크로 기호를 통한 배열 선언
//	//매크로 기호는 #define 매크로 상수명 값을 통해 만들 수 있습니다.
//	//값 5 대신 해당 이름으로 사용할 수 있어 프로그램 해석이 직관적으로 될 수 있습니다.
//#define ARRAY_LENGTH 5
//	string name[ARRAY_LENGTH];
//	//4. 기호 상수를 통해 변수 선언을 할 수 있습니다.
//	//const 키워드는 변수 앞에 붙으면 해당 변수를 상수로 처리합니다. 
//	const int array_length = 5;
//	//array_length = 6;//수정 불가
//	string item[array_length];
//
//	//배열 초기화(배열에 값 넣기)
//
//	//1. 인덱스를 통해서 만들기
//	// 배열명[인덱스번호] = 값;을 통해 배열의 해당 인덱스 번호 위치에 값을 초기화할 수 있습니다.
//
//	//인덱스 사용시 유의 사항
//	//배열의 인덱스는 배열 생성 시 제공되는 배열 접근용 정수형 데이터입니다.
//	//인덱스 번호는 0번부터 배열의 길이 -1번까지 제공됩니다. ex) int name[5]라면 name[0] name[1] name[2] name[3] name[4]까지 제공
//	//인덱스 번호를 넘는 값을 사용할 경우 잘못된 접근으로 문제가 생길 수 있습니다.(인덱스 범위 이탈 오류)
//	pocket[0] = "응급 처치용 키트";
//
//	//2. 초기화 목록(initializer list)을 사용해 전체 배열을 초기화할 수 있습니다.
//	// 이 경우 만들어준 값만큼 자동으로 배열의 길이가 결정되고, 길이에 따라 인덱스가 제공됩니다.
//	int numbers[] = { 1,2,3,4,5 };
//	//numbers의 [] 안에 숫자를 따로 안넣어도 자동으로 처리됩니다.
//
//	//3. 모든 요소를 초기 값으로 넣은 배열
//	//다음과 같이 길이를 작성하고 {}를 통해 따로 값을 안넣으면 자동적으로 초기 값(0)을 넣게 됩니다.
//	int values[10] = {};
//
//	return 0;
//}