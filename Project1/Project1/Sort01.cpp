//#include <iostream>
//using namespace std;
////배열의 정렬
////배열은 순서대로 값을 저장할 수 있습니다.
////그리고 상황에 따라 데이터가 크기 순서대로 정렬되야 하는 경우가 많습니다.
////오름 차순과 내림 차순 정렬 방법을 익힙니다.
//
//int main()
//{
//	int array[] = {7,5,1,4,3 };
//
//	//버블 정렬 : 하나의 배열에서 값을 바꾸는 방식으로 동작합니다.
//	//작업이 마무리 되면 오름차순 또는 내림차순으로 유지됩니다.
//
//	const int COUNT = sizeof(array) / sizeof(array[0]);
//	//배열 전체의 크기 / 배열의 값 하나 => 배열의 개수 / 길이
//
//	int temp; //임시 교환 값
//
//	for (int i = 0; i < COUNT - 1; i++) //전체 값 중 마지막 값의 경우는 자동으로 정렬됩니다.
//	{
//		//값과 값을 비교하기 위해 내부에서 for문 한번 더 진행
//		for (int j = 0; j < COUNT - i - 1; j++) //i번 돌때마다 비교 값의 대상이 달라짐.
//		{
//			//현재의 값과 그 다음 값을 비교
//			if (array[j] > array[j + 1])
//			{
//				//임시 값을 이용해 기존의 값을 저장하고
//				temp = array[j];
//				array[j] = array[j + 1];//현재의 값을 다음 값으로 저장하고
//				array[j+1] = temp; //다음 값을 저장해둔 값으로 다시 설정합니다.
//				//이 과정을 스왑(swap)이라고 부릅니다.
//			}
//		}
//	}
//	for (int value : array)
//	{
//		cout << value << " ";
//	}
//	//장점 : 구현 난이도가 매우 낮은 편에 속합니다.
//	//단점 : 이미 정렬이 완성되어도 어쨋든 모든 경우를 반복해야하기 때문에 효율은 매우 나쁜 편
//
//
//
//
//	return 0;
//}