//#include <iostream>
//#include <string>
//using namespace std;
////Source10.cpp의 클래스 부분에 대한 이해를 진행한 뒤에 해당 파일을 공부합니다.
//
////클래스 사용하기
////1. 클래스를 통한 데이터 표현
////클래스는 함수와 변수의 집합체이기에 특정 프로그램의 핵심 데이터를 표현하기에 적합합니다.
//
////문제) 다음을 만족하는 Student 클래스를 작성하세요.
//// 조건 1. 문장형 데이터 학과와 정수형 데이터 학번을 필드로 선언합니다.
//// 조건 2. 학생의 정보를 출력해주는 함수 Info()를 구현합니다.
//// 조건 3. 학생의 필드는 외부에 노출되지 않습니다.
//// 조건 4. 학생의 필드를 수정하는 함수와 필드 값을 return하는 함수를 각각 구현합니다.
//
//
////풀이)
////1. 클래스 형태 작성
//class Student
//{
//	//2. 조건3에 의해 필드는 외부에 노출이 안됩니다.
//private :
//	//3. 필드 작성(필드는 클래스가 가지고 있는 변수를 의미합니다.)
//	string department;
//	int sid;
//public : //조건 3에 해당이 안되는 부분에 대한 구현
//	void Info() //조건 2 구현
//	{
//		cout << "학과 : " << department << endl;
//		cout << "학번 : " << sid << endl;
//	}
//	//조건 4 구현
//	//4-1 (필드를 수정하는 함수)
//	//값을 설정한다고 해서 주로 set함수라고 부릅니다. Set + 필드명을 가지고
//	//매개변수로는 같은 형태의 데이터를 요구합니다.
//	void SetDepartment(string value) 
//	{
//		department = value;
//	}
//	//4-2(필드를 return 하는 함수)
//	//값을 얻어온다고 해서 주로 get함수라고 부릅니다 Get + 필드명을 가지며, 별도의 매개변수는 가지지 않습니다.
//	string GetDepartment()
//	{
//		return department; //그 값을 그대로 return
//	}
//	void SetSid(int value)
//	{
//		sid = value;
//	}
//	int GetSid()
//	{
//		return sid;
//	}
//};
//
////2. 클래스의 생성자 기능 사용하기
////생성자를 활용하면 클래스를 통해 객체를 생성할 때 값에 대한 설정을 진행할 수 있습니다.
//
//class Computer
//{
//private :
//	string OS;
//	int MEM;
//public :
//	//생성자 만들기
//	//생성자는 클래스의 이름과 동일한 이름을 가진 메소드(함수)입니다.
//	//특징으로는 타입을 따로 가지지 않습니다.
//	//클래스를 생성할 때 해당 함수가 자동으로 호출되며, 생성자를 수정했을 경우에는
//	//해당 형태에 맞게 생성을 진행해줘야 합니다.
//	Computer() { }  //기본 생성자(default Constructor)
//	//아래처럼 생성자를 수정하면 클래스에 대한 선언을 할 수가 없습니다.
//	//선언이 필요한 경우라면 다음과 같이 기본 생성자를 연결해두면 선언이 가능해집니다.
//	Computer(string OS , int MEM)
//	{
//		this->OS = OS; //this는 클래스 자신의 값임을 표현하는 기능을 가지고 있습니다.
//		this->MEM = MEM;
//	}
//	void Info()
//	{
//		cout << "운영 체제 : " << OS << endl;
//		cout << "메모리 : " << MEM << endl;
//	}
//};
//
//int main()
//{
//	Student s1;
//	//학생의 값을 설정합니다.
//	s1.SetSid(1);
//	s1.SetDepartment("Programming");
//
//	//학생의 값을 얻어옵니다.
//	s1.Info();
//	//Computer c1; //생성자가 수정되었기 때문에 오류
//	Computer c1("Windows 11", 64); //함수처럼 이름(전달할 값)으로 사용합니다.
//	c1.Info();
//	//생성자 활용 시 장점
//	//1. 위의 Student처럼 만들 때마다 값을 따로 설정할 필요 없이 생성 시 1회 설정으로 간단히 작업할 수 있습니다.
//	//2. 어떤 값이 들어갔는지 파악하기 쉽습니다.
//	//3. 설계한 데이터 형태대로 값이 들어가기 때문에 생성 시 잘못된 값이 들어갈 일이 크게 없습니다.
//	return 0;
//}