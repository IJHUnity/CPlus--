#include <iostream>
#include <string>
using namespace std;

//클래스(class)
//C언어에서 제공하는 구조체에서 확장된 개념
//사용자가 프로그램에 필요한 데이터를 만들 수 있으며
//클래스 내부에는 변수와 함수를 설계할 수 있습니다.
//클래스는 객체 지향 프로그래밍 방식의 핵심 기능으로
//객체를 만들기 위한 틀입니다.

//객체 지향 프로그래밍(OOP : Object-Oriented Programming)
//'객체'를 기준으로 코드를 나누어 구현합니다.
//객체란 데이터와 데이터와 관련된 기능을 하나로 묶은 것을 의미합니다.

//ex)학원에서부터 집까지 가는 길을 찾는 프로그램

//절차 지향적 해석 : 학원(데이터) / 집(데이터) / 길(데이터)
//					간다.(기능 구현)
//					학원 출발 -> 길 이동 -> 집 도착
//명령의 순서와 절차(호출 순서)가 중요합니다.

//객체 지향적 해석 : 학원 , 집 , 길 , 이동 수단 등을 각각 객체로 설정
//				    학원 -> 길 -> 집   (이동 수단 이용)
//프로그램에서 사용할 객체를 설계하고 그 객체의 기능으로 프로그램을 구현합니다.

//아이스크림 클래스 설계
class ICECREAM
{
public : //클래스 내부의 값을 직접 작업할 수 있게 해줍니다.
	//변수 : 클래스 내부의 변수는 객체의 속성을 표현합니다.
	//클래스 내부의 변수를 '필드'라고 부릅니다.
	string option; //재료
	//함수 : 클래스 내부의 함수는 객체의 기능 ,동작을 표현합니다.
	//클래스 내부의 함수를 '메서드'라고 부릅니다.
	void setResult()
	{
		result = option + "맛 아이스크림";
	}
	string getResult()
	{
		return result; //return 값을 이용해 함수를 호출한 위치에 해당 값을 전달하는 기능
	}

	//값을 직접적으로 전달하고 싶을 경우(return)에는 함수의 타입을 데이터에 맞게 설계합니다.
	//ex) 보내고 싶은 값이 string 데이터일 경우 함수의 타입도 string입니다.

	//전달 없이 실행만 진행하고 싶은 경우네는 함수의 타입을 void로 설계합니다.
	//일반적으로 void를 쓰는 함수를 일반 함수, return 값을 요구하는 함수를 return 함수라고 부릅니다.

private : //클래스 내부의 값을 직접 작업할 수 없습니다.
	string result; //결과물
};

int main()
{
	ICECREAM iceCream01; //클래스명 변수명; (클래스 선언)
	iceCream01.option = "소다"; //클래스변수명.필드명을 통해 클래스 내부의 값을 사용할 수 있습니다.
								//단 private인 경우는 사용 불가
	iceCream01.setResult(); //클래스변수명.메소드명()을 통해 클래스 내부의 함수를 호출할 수 있습니다.
	//cout << iceCream01.result << endl; //private로 설정한 값은 외부에서 사용할 수 없습니다.
	cout << iceCream01.getResult() << endl; 

	ICECREAM iceCream02;
	iceCream02.option = "딸기";
	iceCream02.setResult();
	cout << iceCream02.getResult() << endl;

	//클래스의 장점
	//1. 클래스변수명.변수명을 통해 어떤 데이터가 어떤 값을 가지고 있는지 파악이 쉽습니다. 
	//2. 변수는 일반적으로 같은 이름을 사용할 수가 없음. 하지만 클래스변수명.변수명처럼 특정 데이터의 변수로 표현하기 때문에
	//   이름 중복의 문제가 해결됩니다.(프로그램을 짜다보면 필수적인 이름을 사용하는 경우가 많기 때문)
	//3. 클래스를 설계하면 클래스의 기능만으로 코드를 배치하면 같은 기능을 사용할 수 있음.(효율적)
	//4. 클래스 내부에 변수와 함수가 존재하기 때문에 그 부분에 대한 수정만 진행하면 프로그램이 고쳐짐.(유지보수가 쉬움)

//>> 결과적으로 클래스를 사용하면 중복적인 코드 구현을 많이 줄여주고, 수정에 용이하고, 활용이 쉽다.

	//클래스의 단점
	//1. 설계 과정에 있어 일반적인 구현보다 오랜 시간이 걸립니다.
	//2. 처리 속도가 상대적으로 느립니다.
//>> 결과적으로 클래스 식 구현은 일반적인 코드 구현보다 속도에서 밀리는 모습을 보인다.

	return 0;
}