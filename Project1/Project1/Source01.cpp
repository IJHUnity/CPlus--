//#include <iostream>
//// C++의 입력과 출력을 진행하기 위한 도구 iostream
//// 해당 파일에서는 다음과 같은 기능을 제공합니다.
////1. cout 객체 : 해당 도구를 이용해 출력을 진행합니다.
////2. cin 객체 :  해당 도구를 이용해 입력을 진행합니다.
//
////프로그램이 시작되는 위치(main)
//int main()
//{
//	std::cout << "Hello!" << std::endl;
//	//1. namespace std : 네임스페이스는 C++에서 별도로 관리하기 위한 영역을 의미합니다.
//	//C++에는 많은 양의 데이터가 존재해서 이름 등이 겹칠 수 있는데 이를 방지하기 위한 용도
//	//2. <<는 삽입 연산자라고 불리며, 오른쪽에 위치하는 출력할 데이터를 출력 스트림에 삽입합니다.
//	//3. 이렇게 스트림에 삽입된 데이터는 스트림을 통해 출력 장치(cout)에 전달되어 출력됩니다.
//
//	std::cout << 1 << 'a' << "Word" << 10.5f << true << std::endl;
//	//C언어에서는 출력을 위해 printf와 서식 지정자를 통해 데이터를 구분했다면
//	//C++의 cout은 값을 넣으면 알아서 그 형태를 처리해줄 수 있습니다.
//
//	//값 입력 형태
//	//정수 : 그대로 입력합니다. 일반적으로는 int를 인식하고, int의 범위보다 커지면 더 큰 형태로 변경
//	//실수 : float형 데이터일 경우 f를 붙입니다. 안붙일 경우 double로 인식합니다.
//	//문자 : 작은 따옴표에 감싸서 표현합니다. 영대문자, 숫자, 특수문자 등을 표현합니다. 한글은 불가 
//	//문장 : 큰 따옴표에 감싸서 표현합니다.
//	//논리 : C++에서는 true, false가 추가되어 맞는지 아닌지를 판단할 수 있습니다.(출력 시 true : 1 , false : 0)
//
//	//std::endl은 작업을 마무리 후 버퍼를 비워주고 enter 작업을 진행합니다.
//
//	//std::cout의 특징
//	//1. 서식 지정자 없이 데이터를 자동으로 판단해 출력
//	//2. printf보다 처리 속도가 느리게 설계되어 있습니다.
//	//3. << 연산자를 통해 데이터의 흐름을 파악하기가 쉽습니다. 단 이런 특성 때문에 printf보다 코드가 길게 작성됩니다.
//
//	return 0;
//}